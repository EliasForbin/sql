<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/ekoks/OneDrive/Documents/UoT/SQL/Project/sql/05_src/sql/farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="8651"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><table title="booth" custom_title="0" dock_id="4" table="4,5:mainbooth"/><dock_state state="000000ff00000000fd00000001000000020000043c000002b6fc0100000004fb000000160064006f0063006b00420072006f007700730065003101000000000000043c0000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f00770073006500330100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f00770073006500340100000000ffffffff0000011800ffffff000002580000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="COALESCE">-- Create the product table
CREATE TABLE product (
    product_id INTEGER PRIMARY KEY,-- Unique ID for each product in our list
    product_name VARCHAR(255),-- Product name
    product_size VARCHAR(50),-- Size or the weight of the product.
    product_qty_type VARCHAR(50)-- Type of quantity (e.g. bottle, piece, bag etc)
);

-- Insert sample product data
INSERT INTO product (product_name, product_size, product_qty_type) VALUES
('Banana', 'Medium', 'Piece'),
('Milk', '1 Liter', 'Bottle'),
(NULL,NULL, 'Bag'),
('Body Lotion', '500 ml', 'Bottle'),
('Bread', 'Large', 'Loaf'),
('Coffee', '250 g', 'Pack'),
('Tea', '200 g', 'Tin'),
('Mango Juice', '1 Liter', 'Bottle'),
('Pasta', '500 mg', 'package'),
('Cheese', '500 g', 'Block');

-- Retrieve the product list in the desired format
SELECT 
    coalesce(product_name, ' ') || ', ' || coalesce(product_size, 'unit') || ' (' || product_qty_type || ')' AS product_details
FROM product;

</sql><sql name="WINDOWED FUNCTIONS">--QUESTION 1
--Numbering each visit (Unsing Row_Number)
SELECT 
    customer_id,
    market_date,
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY market_date) AS visit_number
FROM new_customer_purchases;
--Numbering Unique Market dates
SELECT 
    customer_id,
    market_date,
    DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY market_date) AS visit_number
FROM new_customer_purchases;

--QUESTION 2
--Reverse numbering
SELECT 
    customer_id,
    market_date,
	vendor_id, 
	product_id, 
	quantity,
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY market_date DESC) AS reversed_visit_number
FROM new_customer_purchases;

--Use subquery to fliter most recent visit
SELECT customer_id,
FROM (SELECT customer_id, market_date,
        ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY market_date DESC) AS reversed_visit_number
    FROM new_customer_purchases
)AS visit_data
WHERE visit_data.reversed_visit_number = 1;

--Question 3
SELECT 
    customer_id,
    product_id,
    market_date,
    COUNT(*) OVER (PARTITION BY customer_id, product_id) AS purchase_count
FROM new_customer_purchases;

</sql><sql name="STRING MANIPULATION">

SELECT
    product_name,
    CASE 
      WHEN INSTR(product_name, '-') &gt; 0 
      THEN TRIM(SUBSTR(product_name, INSTR(product_name, '-') + 1))
      ELSE NULL
    END AS product_description
FROM product;</sql><sql name="UNION">--Drop the tenporary table if it already EXISTS
DROP TABLE IF EXISTS TempDailySales;
--Create a temp table that aggregates total sales per market date
CREATE TEMP TABLE TempDailySales AS
    SELECT 
        market_date, 
        SUM(quantity*cost_to_customer_per_qty) AS sales
    FROM customer_purchases
    GROUP BY market_date
--SELECT* FROM TempDailySales;
--Create a tenp table with rank windowed function on the previous query to create best day and worst day
DROP TABLE IF EXISTS RankedDays;
CREATE TEMP TABLE RankedDays AS 
    SELECT 
        market_date,
        sales,
        DENSE_RANK() OVER (ORDER BY sales DESC) AS best_rank,
        DENSE_RANK() OVER (ORDER BY sales ASC)  AS worst_rank
    FROM TempDailySales;
--SELECT* FROM RankedDays;
--Query the second table twice, one for best and the other for worst with a union bing them.
SELECT 
    market_date,
    sales,
	'Highest' AS sales_type
	FROM RankedDays
	WHERE best_rank=1
UNION
SELECT 
    market_date,
    sales,
	'Lowest' AS sales_type
	FROM RankedDays
	WHERE worst_rank=1;
</sql><sql name="CROSS JOIN">
SELECT 
    v.vendor_name,
    p.product_name,
    5 * vi.original_price * cust.total_customers AS potential_revenue
FROM vendor_inventory AS vi
JOIN vendor AS v 
  ON vi.vendor_id = v.vendor_id
JOIN product AS p
  ON vi.product_id = p.product_id
CROSS JOIN (
    SELECT COUNT(*) AS total_customers FROM customer
) AS cust;</sql><sql name="INSERT">--DROP TABLE product_units;
CREATE TABLE product_units AS
SELECT 
    p.*,
    CURRENT_TIMESTAMP AS snapshot_timestamp
FROM product p
WHERE product_qty_type = 'unit';

--SELECT* FROM product_units;

INSERT INTO product_units (product_id, product_name, product_size, product_category_id, product_qty_type, snapshot_timestamp)
VALUES (24, 'Apple Pie', 'Large',1, 'unit', CURRENT_TIMESTAMP);</sql><sql name="DELETE">DELETE FROM product_units
WHERE product_name = 'Apple Pie'
  AND snapshot_timestamp = (
    SELECT MAX(snapshot_timestamp)
    FROM product_units
    WHERE product_name = 'Apple Pie'
  );
  
</sql><sql name="UPDATE">--Add a new COLUMN
ALTER TABLE product_units
ADD current_quantity INT;
--Update current_quantity based on the last quant from vendor_inventory
UPDATE product_units
SET current_quantity = COALESCE((
    SELECT MAX(quantity)
    FROM vendor_inventory
    WHERE vendor_inventory.product_id = product_units.product_id
), 0)
WHERE product_id IN (
    SELECT DISTINCT product_id
    FROM vendor_inventory
);
SELECT* FROM product_units;</sql><current_tab id="0"/></tab_sql></sqlb_project>
