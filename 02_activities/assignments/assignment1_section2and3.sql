BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "assignment1" (
	"field1"	TEXT,
	"field2"	TEXT
);
INSERT INTO "assignment1" VALUES ('/* ASSIGNMENT 1 */',NULL);
INSERT INTO "assignment1" VALUES ('/* SECTION 2 */',NULL);
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES ('--SELECT',NULL);
INSERT INTO "assignment1" VALUES ('/* 1. Write a query that returns everything in the customer table. */',NULL);
INSERT INTO "assignment1" VALUES ('SELECT *',NULL);
INSERT INTO "assignment1" VALUES ('FROM customer;',NULL);
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES ('/* 2. Write a query that displays all of the columns and 10 rows from the cus- tomer table',NULL);
INSERT INTO "assignment1" VALUES ('sorted by customer_last_name','then customer_first_ name. */');
INSERT INTO "assignment1" VALUES ('SELECT *',NULL);
INSERT INTO "assignment1" VALUES ('FROM customer ORDER BY customer_first_name ASC, customer_last_name ASC',NULL);
INSERT INTO "assignment1" VALUES ('LIMIT 10;',NULL);
INSERT INTO "assignment1" VALUES ('--WHERE',NULL);
INSERT INTO "assignment1" VALUES ('/* 1. Write a query that returns all customer purchases of product IDs 4 and 9. */',NULL);
INSERT INTO "assignment1" VALUES ('-- option 1',NULL);
INSERT INTO "assignment1" VALUES ('SELECT *',NULL);
INSERT INTO "assignment1" VALUES ('FROM customer_purchases WHERE product_id IN (4, 9);',NULL);
INSERT INTO "assignment1" VALUES ('-- option 2',NULL);
INSERT INTO "assignment1" VALUES ('SELECT *',NULL);
INSERT INTO "assignment1" VALUES ('FROM customer_purchases',NULL);
INSERT INTO "assignment1" VALUES ('WHERE product_id=4 OR product_id=9;',NULL);
INSERT INTO "assignment1" VALUES ('/*2. Write a query that returns all customer purchases and a new calculated column ''price'' (quantity * cost_to_customer_per_qty)',NULL);
INSERT INTO "assignment1" VALUES ('filtered by vendor IDs between 8 and 10 (inclusive) using either:',NULL);
INSERT INTO "assignment1" VALUES ('1.  two conditions using AND',NULL);
INSERT INTO "assignment1" VALUES ('2.  one condition using BETWEEN',NULL);
INSERT INTO "assignment1" VALUES ('*/',NULL);
INSERT INTO "assignment1" VALUES ('-- option 1',NULL);
INSERT INTO "assignment1" VALUES ('SELECT *, (quantity*cost_to_customer_per_qty) AS price FROM customer_purchases',NULL);
INSERT INTO "assignment1" VALUES ('WHERE vendor_is BETWEEN 8 AND 10;',NULL);
INSERT INTO "assignment1" VALUES ('-- option 2',NULL);
INSERT INTO "assignment1" VALUES ('SELECT *, (quantity*cost_to_customer_per_qty) AS price FROM customer_purchases',NULL);
INSERT INTO "assignment1" VALUES ('vendor_id >= 8 AND vendor_id <=10;',NULL);
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES ('--CASE',NULL);
INSERT INTO "assignment1" VALUES ('/* 1. Products can be sold by the individual unit or by bulk measures like lbs. or oz.',NULL);
INSERT INTO "assignment1" VALUES ('Using the product table','write a query that outputs the product_id and product_name');
INSERT INTO "assignment1" VALUES ('columns and add a column called prod_qty_type_condensed that displays the word “unit”',NULL);
INSERT INTO "assignment1" VALUES ('if the product_qty_type is “unit','” and otherwise displays the word “bulk.” */');
INSERT INTO "assignment1" VALUES ('SELECT product_id, product_name, CASE WHEN product_qty_type = ''unit'' THEN ''unit'' ELSE ''bulk''',NULL);
INSERT INTO "assignment1" VALUES ('END AS prod_qty_type_condensed',NULL);
INSERT INTO "assignment1" VALUES ('FROM product;',NULL);
INSERT INTO "assignment1" VALUES ('/* 2. We want to flag all of the different types of pepper products that are sold at the market.',NULL);
INSERT INTO "assignment1" VALUES ('add a column to the previous query called pepper_flag that outputs a 1 if the product_name',NULL);
INSERT INTO "assignment1" VALUES ('contains the word “pepper” (regardless of capitalization)','and otherwise outputs 0. */');
INSERT INTO "assignment1" VALUES ('SELECT product_id,product_name, CASE WHEN product_qty_type = ''unit'' THEN ''unit'' ELSE ''bulk'' END AS prod_qty_type_condensed,',NULL);
INSERT INTO "assignment1" VALUES ('CASE WHEN LOWER(product_name) LIKE ''%pepper%'' THEN 1 ELSE 0 END AS pepper_flag',NULL);
INSERT INTO "assignment1" VALUES ('FROM product;',NULL);
INSERT INTO "assignment1" VALUES ('--JOIN',NULL);
INSERT INTO "assignment1" VALUES ('/* 1. Write a query that INNER JOINs the vendor table to the vendor_booth_assignments table on the',NULL);
INSERT INTO "assignment1" VALUES ('vendor_id field they both have in common','and sorts the result by vendor_name');
INSERT INTO "assignment1" VALUES ('SELECT vendor.vendor_id, vendor_name,vendor_type, vendor_owner_first_name, vendor_owner_last_name, booth_number, market_date',NULL);
INSERT INTO "assignment1" VALUES ('FROM vendor INNER JOIN vendor_booth_assignments',NULL);
INSERT INTO "assignment1" VALUES ('ON vendor.vendor_id = vendor_booth_assignments.vendor_id',NULL);
INSERT INTO "assignment1" VALUES ('ORDER BY vendor_name, market_date;',NULL);
INSERT INTO "assignment1" VALUES ('/* SECTION 3 */',NULL);
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES ('-- AGGREGATE',NULL);
INSERT INTO "assignment1" VALUES ('/* 1. Write a query that determines how many times each vendor has rented a booth',NULL);
INSERT INTO "assignment1" VALUES ('at the farmer’s market by counting the vendor booth assignments per vendor_id. */',NULL);
INSERT INTO "assignment1" VALUES ('SELECT vendor_id, COUNT(*) AS booth_rentals',NULL);
INSERT INTO "assignment1" VALUES ('FROM vendor_booth_assignments',NULL);
INSERT INTO "assignment1" VALUES ('GROUP BY vendor_id;',NULL);
INSERT INTO "assignment1" VALUES ('/* 2. The Farmer’s Market Customer Appreciation Committee wants to give a bumper',NULL);
INSERT INTO "assignment1" VALUES ('sticker to everyone who has ever spent more than $2000 at the market. Write a query that generates a list',NULL);
INSERT INTO "assignment1" VALUES ('of customers for them to give stickers to','sorted by last name');
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES ('HINT: This query requires you to join two tables','use an aggregate function');
INSERT INTO "assignment1" VALUES ('SELECT customer.customer_id, customer_first_name, customer_last_name, SUM(customer_purchases.cost_to_customer_per_qty) AS total_spent',NULL);
INSERT INTO "assignment1" VALUES ('FROM customer INNER JOIN  customer_purchases ON customer.customer_id = customer_purchases.customer_id',NULL);
INSERT INTO "assignment1" VALUES ('GROUP BY customer.customer_id, customer_first_name, customer_last_name HAVING SUM(cost_to_customer_per_qty) > 2000 ORDER BY customer_first)name, customer_last_name;',NULL);
INSERT INTO "assignment1" VALUES ('--Temp Table',NULL);
INSERT INTO "assignment1" VALUES ('/* 1. Insert the original vendor table into a temp.new_vendor and then add a 10th vendor:',NULL);
INSERT INTO "assignment1" VALUES ('Thomass Superfood Store','a Fresh Focused store');
INSERT INTO "assignment1" VALUES ('',NULL);
INSERT INTO "assignment1" VALUES ('HINT: This is two total queries -- first create the table from the original','then insert the new 10th vendor.');
INSERT INTO "assignment1" VALUES ('When inserting the new vendor','you need to appropriately align the columns to be inserted');
INSERT INTO "assignment1" VALUES ('(there are five columns to be inserted','I''ve given you the details');
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES ('-> To insert the new row use VALUES','specifying the value you want for each column:');
INSERT INTO "assignment1" VALUES ('VALUES(col1','col2');
INSERT INTO "assignment1" VALUES ('*/',NULL);
INSERT INTO "assignment1" VALUES ('CREATE TABLE temp.new_vendor AS SELECT * FROM vendor;',NULL);
INSERT INTO "assignment1" VALUES ('INSERT INTO temp.new_vendor (vendor_id, vendor_name, vendor_type, vendor_owner_first_name, vendor_owner_last_name)','');
INSERT INTO "assignment1" VALUES ('VALUES (10, ''Thomass Superfood Store'', ''Fresh Focused'',''Thomas'', ''Rosenthal'')','');
INSERT INTO "assignment1" VALUES ('-- Date',NULL);
INSERT INTO "assignment1" VALUES ('/*1. Get the customer_id','month');
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES ('HINT: you might need to search for strfrtime modifers sqlite on the web to know what the modifers for month',NULL);
INSERT INTO "assignment1" VALUES ('and year are! */',NULL);
INSERT INTO "assignment1" VALUES ('SELECT customer_id,',NULL);
INSERT INTO "assignment1" VALUES ('strftime(''%m'', market_date) AS purchase_month,strftime(''%Y'', market_date) AS purchase_year','');
INSERT INTO "assignment1" VALUES ('FROM customer_purchases;',NULL);
INSERT INTO "assignment1" VALUES ('/* 2. Using the previous query as a base','determine how much money each customer spent in April 2022.');
INSERT INTO "assignment1" VALUES ('Remember that money spent is quantity*cost_to_customer_per_qty.',NULL);
INSERT INTO "assignment1" VALUES (NULL,NULL);
INSERT INTO "assignment1" VALUES ('HINTS: you will need to AGGREGATE','GROUP BY');
INSERT INTO "assignment1" VALUES ('but remember','STRFTIME returns a STRING for your WHERE statement!! */');
INSERT INTO "assignment1" VALUES ('SELECT customer_id,SUM(quantity * cost_to_customer_per_qty) AS total_spent
FROM customer_purchases
WHERE strftime(''%Y'', purchase_date) = ''2022'' AND strftime(''%m'', purchase_date) = ''04''
GROUP BY customer_id;',NULL);
COMMIT;
